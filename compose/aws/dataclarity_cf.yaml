Description: 'Deploy a DataClarity cluster'
Parameters:
  InstanceType:
    Type: String
    Description: AWS EC2 instance specs
    AllowedValues:
      - 4-vCPUs-16-GB-RAM-150-GB-SSD
      - 4-vCPUs-32-GB-RAM-150-GB-SSD
      - 8-vCPUs-32-GB-RAM-300-GB-SSD
      - 8-vCPUs-64-GB-RAM-300-GB-SSD
    Default: 8-vCPUs-32-GB-RAM-300-GB-SSD
  TLS:
    Description: Disable or enable TLS using a self-signed certificate created on the fly
    Type: String
    AllowedValues:
      - Disable
      - Enable
    Default: Enable
  CustomPassword:
    Description: Enter the master console password with a minimum length of 12 characters (leave the field blank to randomly generate a password)
    Type: String
    NoEcho: true
    MaxLength: 100
    Default: ''
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: DataClarity Cluster
        Parameters:
          - InstanceType
          - TLS
          - RAM
          - DiskSize
          - AMI
      -
        Label:
          default: DataClarity App Configuration
        Parameters:
          - CustomPassword
    ParameterLabels:
      InstanceType:
        default: "Select the type and size of the cluster"
      TLS:
        default: "Select a TLS option"
      CustomPassword:
        default: "Password for master console"
Mappings:
  InstanceTypes:
    4-vCPUs-16-GB-RAM-150-GB-SSD:
      InstanceType: m5d.xlarge
      RAM: 16
      DiskSize: 150
    4-vCPUs-32-GB-RAM-150-GB-SSD:
      InstanceType: r5dn.xlarge
      RAM: 32
      DiskSize: 150
    8-vCPUs-32-GB-RAM-300-GB-SSD:
      InstanceType: m5ad.2xlarge
      RAM: 32
      DiskSize: 300
    8-vCPUs-64-GB-RAM-300-GB-SSD:
      InstanceType: r5ad.2xlarge
      RAM: 64
      DiskSize: 300
  OS: # Ubuntu Server 22.04 LTS
    af-south-1: # Africa (Cape Town)
      AMI: ami-0bd6e451a0211224f
    ap-east-1: # Asia Pacific (Hong Kong)
      AMI: ami-051699ed177bc3d67
    ap-northeast-1: # Asia Pacific (Tokyo)
      AMI: ami-0c597cc9c10ca9088
    ap-northeast-2: # Asia Pacific (Seoul)
      AMI: ami-0502b8f5f0ca3ed7d
    ap-northeast-3: # Asia Pacific (Osaka)
      AMI: ami-040b504c67641f0cc
    ap-south-1: # Asia Pacific (Mumbai)	
      AMI: ami-0dc886bce1f85f67e
    ap-south-2 : # Asia Pacific (Hyderabad)
      AMI: ami-04d2538aa74707978
    ap-southeast-1: # Asia Pacific (Singapore)
      AMI: ami-0d21214905506a7f4
    ap-southeast-2: # Asia Pacific (Sydney)
      AMI: ami-09fb5e610ae14ee00
    ap-southeast-3: # Asia Pacific (Jakarta)
      AMI: ami-0f2e6ee654b98f96b
    ap-southeast-4: # Asia Pacific (Melbourne)
      AMI: ami-0de6423a6e32d147d
    ca-central-1: # Canada (Central)
      AMI: ami-02da4d5de61d161c5
    eu-central-1: # Europe (Frankfurt)
      AMI: ami-03f1cc6c8b9c0b899
    eu-central-2: # Europe (Zurich)
      AMI: ami-083714d0ac0c1a80a
    eu-north-1: # Europe (Stockholm)
      AMI: ami-05baaef454dd96656
    eu-south-1: # Europe (Milan)
      AMI: ami-0faa5fa8924e8b7de
    eu-south-2: # Europe (Spain)
      AMI: ami-0b308244dcf4a624a
    eu-west-1: # Europe (Ireland)
      AMI: ami-0786f5bc3943ad52d
    eu-west-2: # Europe (London)
      AMI: ami-0ccdcf8ea5cace030
    eu-west-3: # Europe (Paris)
      AMI: ami-0b108d96bcb0de81c
    me-central-1: # Middle East (UAE)
      AMI: ami-050fa395f4aaae15d
    me-south-1: # Middle East (Bahrain)
      AMI: ami-0515452e9b0f40e44
    sa-east-1: # South America (SÃ£o Paulo)
      AMI: ami-0cd79c08dc1353a91
    us-east-1: # US East (N. Virginia)
      AMI: ami-003d3d03cfe1b0468
    us-east-2: # US East (Ohio)
      AMI: ami-05f4e4084abd205cf
    us-west-1: # US West (N. California)
      AMI: ami-0ff832bdf91944651
    us-west-2: # US West (Oregon)
      AMI: ami-032f8589b3e7f4e5b
Conditions:
  isHTTPS: !Equals [ !Ref TLS, Enable]
  isHTTP: !Equals [ !Ref TLS, Disable]
  isRandomPassword: !Equals [!Ref CustomPassword, ""]
Resources:
  DCSecretsManager:
    Type: AWS::SecretsManager::Secret
    Condition: isRandomPassword
    Properties:
      GenerateSecretString:
        SecretStringTemplate: '{"username": "dcadmin"}'
        GenerateStringKey: 'password'
        PasswordLength: 12
        ExcludePunctuation: true
  DCRandomPassword:
    Type: AWS::SSM::Parameter
    Condition: isRandomPassword
    Properties:
      Name: RandomString
      Type: String
      Value:
        Fn::Sub: "{{resolve:secretsmanager:${DCSecretsManager}::password}}"
  DCInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [OS, !Ref "AWS::Region", AMI]
      InstanceType: !FindInMap [InstanceTypes, !Ref InstanceType, InstanceType]
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: !FindInMap [InstanceTypes, !Ref InstanceType, DiskSize]
            DeleteOnTermination: true
            VolumeType: gp2
      UserData:
        Fn::Base64: !Sub
          - | 
            #!/bin/bash
                        
            # Install Docker and Docker Compose
            apt-get update
            apt-get install ca-certificates curl gnupg -y
            
            install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
            chmod a+r /etc/apt/keyrings/docker.gpg
            
            echo \
            "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
            tee /etc/apt/sources.list.d/docker.list > /dev/null
            
            apt-get update
            apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
            
            usermod -aG docker ubuntu
            
            systemctl enable docker.service
            systemctl enable containerd.service
            
            # Download and untar the DataClarity package
            curl -L https://github.com/DataClarityCorp/distribution/raw/main/compose/aws/dataclarity.tar.gz -o /opt/dataclarity.tar.gz
            tar -zxf /opt/dataclarity.tar.gz -C /opt
            chmod -R 777 /opt/dataclarity
            cd /opt/dataclarity/
            
            # Setup a self-signed certificate
            if [[ ${TLS} = "Enable" ]]; then
              openssl req -x509 -nodes -days 36500 -newkey rsa:2048 -subj "/CN=${IP}" -keyout assets/certs/dc/cert.key -out assets/certs/dc/cert.crt
              sed -i 's|http://$PUBLIC_ENTRYPOINT|https://$PUBLIC_ENTRYPOINT|g' docker-compose.yml
              sed -i 's|http://{host}|https://{host}|g' docker-compose.yml
              sed -i 's|http://$PUBLIC_ENTRYPOINT|https://$PUBLIC_ENTRYPOINT|g' assets/config/notification/application.properties
              sed -i 's|http://$PUBLIC_ENTRYPOINT|https://$PUBLIC_ENTRYPOINT|g' assets/config/ui/config.json
              rm assets/config/load-balancer/nginx.conf
              mv assets/config/load-balancer/nginx_ssl.conf assets/config/load-balancer/nginx.conf
            else
              rm assets/config/load-balancer/nginx_ssl.conf
            fi
            
            # Update the entry point with the IP, in the config files
            sed -i "s|\$PUBLIC_ENTRYPOINT|${IP}|g" docker-compose.yml
            sed -i "s|\$PUBLIC_ENTRYPOINT|${IP}|g" assets/config/notification/application.properties
            sed -i "s|\$PUBLIC_ENTRYPOINT|${IP}|g" assets/config/ui/config.json
            
            # Update password, in the env file
            sed -i "s|\KEYCLOAK_PASSWORD=PXJ3WOymAYXYur6K|KEYCLOAK_PASSWORD=${PASSWORD}|g" .env
            
            if [[ ${RAM} = "16" ]]; then
            sed -i "s|DRILLBIT_MAX_PROC_MEM: 24G|DRILLBIT_MAX_PROC_MEM: 9G|g" docker-compose.yml
            elif [[ ${RAM} = "64" ]]; then
            sed -i "s|DRILLBIT_MAX_PROC_MEM: 24G|DRILLBIT_MAX_PROC_MEM: 48G|g" docker-compose.yml
            fi
            
            # Create the DataClarity persistent volumes
            docker volume create pgdata
            docker volume create zkdata
            docker volume create zklogs
            docker volume create drill-dfs
            docker volume create screenshots-storage
            
            # Create the DataClarity containers
            docker compose up -d
          - TLS: !Ref TLS
            RAM: !FindInMap [InstanceTypes, !Ref InstanceType, RAM]
            IP: $(curl http://checkip.amazonaws.com)
            PASSWORD: !If [isRandomPassword, !GetAtt DCRandomPassword.Value, !Ref CustomPassword]
      SecurityGroups:
        - !Ref DCSecurityGroup
  DCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        ToPort: 22
        IpProtocol: tcp
      - CidrIp: "0.0.0.0/0"
        FromPort: 80
        ToPort: 80
        IpProtocol: tcp
      - CidrIp: "0.0.0.0/0"
        FromPort: 443
        ToPort: 443
        IpProtocol: tcp
Outputs:
  ApplicationURL:
    Description: "Use this URL to access DataClarity (Username: admin, Password: admin)"
    Value:
      !If
        - isHTTPS
        - !Join [ "", ["https://", !GetAtt DCInstance.PublicIp, "/home"]]
        - !Join [ "", ["http://", !GetAtt DCInstance.PublicIp, "/home"]]
  MasterConsoleURL:
    Description: "DataClarity Master Console"
    Value:
      Fn::If:
        - isHTTPS
        - Fn::Join:
            - ""
            - - "https://"
              - !GetAtt DCInstance.PublicIp
              - "/auth/admin/master/console "
              - "Use this URL to access DataClarity Master Console (Username: dcadmin, Password: "
              - !If [isRandomPassword, !GetAtt DCRandomPassword.Value, !Ref CustomPassword]
        - Fn::Join:
            - ""
            - - "http://"
              - !GetAtt DCInstance.PublicIp
              - "/auth/admin/master/console "
              - "Use this URL to access DataClarity Master Console (Username: dcadmin, Password: "
              - !If [isRandomPassword, !GetAtt DCRandomPassword.Value, !Ref CustomPassword]
